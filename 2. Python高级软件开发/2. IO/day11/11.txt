前情回顾

1. ftp 文件服务

2. IO模型： 阻塞  非阻塞  IO多路复用

   阻塞 ： 默认IO，效率低， 实现简单
   非阻塞 ： 将 IO变为非阻塞的形态

           setblocking()
           settimeout()

   IO 多路复用


IO 多路复用方法总结

select： 支持平台最多　windows  Linux Unix
         最多支持的IO数量  1024
         效率一般

poll :  支持 Linux Unix
        支持IO数量无上限
        效率一般

epoll ： 支持 Linux
        支持IO数量无上限
        效率较高
             (1. epoll直接将关注IO放入操作系统空间，不用每次调用监控函数都提交一遍
              2. epoll中操作系统得知哪个IO就绪会直接告知应用层，不需要应用层再遍历查找到底哪个就绪了)
        支持边缘触发（当IO发生如果没有处理则不会持续提醒）


练习： 升级我们的http_server

      * 从客户端（浏览器）接收请求
      * 组织响应内容
      * 将响应发送给浏览器

      升级点：
         使用IO多路服用方法形成IO的并发操作处理
         网页有多个网页
         使用类进行封装


类的设计：
   1.  在用户使用的角度进行设计

       * 思考1，你用过的一些类似功能的类都是怎么使用的
       * 思考2，应该尽可能帮使用者实现更多的内容，但要明确什么都是是用户需要自己决定的

             参数
             方法重写
             继承我的类

   2. 确定功能步骤，在类中分块实现








